substitutions:
  name: m5stack-atom-echo-94
  friendly_name: M5-Kitchen
  micro_wake_word_model: okay_nabu  # alexa, hey_jarvis, hey_mycroft are also supported

#psram not more needed since ESPHome version 2025.4.2
#external_components:
#  - source: github://esphome/esphome@2025.3.3
#    components: [psram]

# globals:
#   # Global variable storing if conversation need a reply
#   - id: need_reply
#     type: bool
#     restore_value: no
#     initial_value: 'false'

esphome:
  name: ${name}
  name_add_mac_suffix: true
  friendly_name: ${friendly_name}
  min_version: 2025.2.0

esp32:
  board: m5stack-atom
  framework:
    type: esp-idf
    version: 4.4.8
    platform_version: 5.4.0

logger:
  
api:
  encryption:
    key: ##KEYHERE

ota:
  - platform: esphome
    id: ota_esphome

wifi:
  ap:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

captive_portal:

button:
  - platform: factory_reset
    id: factory_reset_btn
    name: Factory reset

i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO33
    i2s_bclk_pin: GPIO19

microphone:
  - platform: i2s_audio
    id: echo_microphone
    i2s_din_pin: GPIO23
    adc_type: external
    pdm: true

speaker:
  - platform: i2s_audio
    id: echo_speaker
    i2s_dout_pin: GPIO22
    dac_type: external
    bits_per_sample: 32bit
    channel: right
    buffer_duration: 60ms

media_player:
  - platform: speaker
    name: None
    id: echo_media_player
    announcement_pipeline:
      speaker: echo_speaker
      format: WAV
    codec_support_enabled: false
    buffer_size: 6000
    volume_min: 0.4
    files:
      - id: timer_finished_wave_file
        file: https://github.com/esphome/wake-word-voice-assistants/raw/main/sounds/timer_finished.wav
    on_announcement:
      - if:
          condition:
            - microphone.is_capturing:
          then:
            - if:
                condition:
                  lambda: return id(wake_word_engine_location).state == "On device";
                then:
                  - micro_wake_word.stop:
                else:
                  - voice_assistant.stop:
            - script.execute: reset_led
      - light.turn_on:
          id: led
          blue: 100%
          red: 0%
          green: 0%
          brightness: 100%
          effect: none
    on_idle:
      - script.execute: start_wake_word

voice_assistant:
  id: va
  microphone: echo_microphone
  media_player: echo_media_player
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  on_listening:
    # - lambda: |-
    #     ESP_LOGI("voice_assistant", "Here In Listening");
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        effect: "Slow Pulse"
  on_stt_vad_end:
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        effect: "Fast Pulse"
  on_tts_start:
    # - if:
        # condition:
          # lambda: return x.length() > 0 && x[x.length()-1] == '?';
        # then:
          # - switch.turn_on: needs_reply_active # turn on continue conversation.
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        brightness: 100%
        effect: none
  on_tts_end:
    - if:
        condition:
          lambda: return id(output_speaker).state != "" && id(output_speaker).state != "unknown"; # check if an output speaker has been defined
        then:
          - homeassistant.service: # play the response through the media player (remember this only works with nest and some other media players and not alexa)
              service: media_player.play_media
              data:
                entity_id: !lambda |-
                  return id(output_speaker).state;
                media_content_id: !lambda 'return x;'
                media_content_type: "music"
  on_end:
    # - if:
    #     condition:
    #       lambda: return id(needs_reply_active).state == true;
    #     then:
    #       - delay: 500ms
    #       - switch.turn_off: needs_reply_active # turn off continue conversation detection - allows you to bind an automation.
    #       - delay: 100ms
    #       - switch.turn_off: wake_word_active # turn off wake word detection - allows you to bind an automation to the wakeword.
    #     else:
    #       # Reset the voice assistant.
    #       - switch.turn_off: wake_word_active # turn off wake word detection - allows you to bind an automation to the wakeword.
    #       - delay: 100ms
    #       - script.execute: start_wake_word    
    - switch.turn_off: wake_word_active # turn off wake word detection - allows you to bind an automation to the wakeword.
    - delay: 100ms
    - script.execute: start_wake_word    
  on_error:
    - switch.turn_off: wake_word_active # turn off wake word detection - allows you to bind an automation to the wakeword.
    - delay: 100ms
    # - switch.turn_off: needs_reply_active # turn off continue conversation detection - allows you to bind an automation.
    - light.turn_on:
        id: led
        red: 100%
        green: 0%
        blue: 0%
        brightness: 100%
        effect: none
    - delay: 2s
    - script.execute: reset_led
  on_client_connected:
    - delay: 2s  # Give the api server time to settle
    - script.execute: start_wake_word
  on_client_disconnected:
    - voice_assistant.stop:
    - micro_wake_word.stop:
  on_timer_finished:
    - voice_assistant.stop:
    - micro_wake_word.stop:
    - wait_until:
        not:
          microphone.is_capturing:
    - switch.turn_on: timer_ringing
    - light.turn_on:
        id: led
        red: 0%
        green: 100%
        blue: 0%
        brightness: 100%
        effect: "Fast Pulse"
    - while:
        condition:
          switch.is_on: timer_ringing
        then:
          - homeassistant.service:
              service: media_player.play_media
              data:
                entity_id: !lambda |-
                  return id(output_speaker).state;
                media_content_id: !lambda 'return std::string((const char*)id(timer_finished_wave_file));'
                media_content_type: "music"
          - delay: 1s
    - wait_until:
        - switch.is_off: timer_ringing
    - light.turn_off: led
    - switch.turn_off: timer_ringing

binary_sensor:
  # button does the following:
  # short click - stop a timer
  # if no timer then restart either microwakeword or voice assistant continuous
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    name: Button
    disabled_by_default: true
    entity_category: diagnostic
    id: echo_button
    on_multi_click:
      - timing:
          - ON for at least 50ms
          - OFF for at least 50ms
        then:
          - if:
              condition:
                switch.is_on: timer_ringing
              then:
                - switch.turn_off: timer_ringing
              else:
                - script.execute: start_wake_word
      - timing:
          - ON for at least 10s
        then:
          - button.press: factory_reset_btn

light:
  - platform: esp32_rmt_led_strip
    id: led
    name: None
    disabled_by_default: true
    entity_category: config
    pin: GPIO27
    default_transition_length: 0s
    chipset: SK6812
    num_leds: 1
    rgb_order: grb
    rmt_channel: 0
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

script:
  - id: reset_led
    then:
      - if:
          condition:
            - lambda: return id(wake_word_engine_location).state == "On device";
            - switch.is_on: use_listen_light
          then:
            - light.turn_on:
                id: led
                red: 100%
                green: 89%
                blue: 71%
                brightness: 60%
                effect: none
          else:
            - if:
                condition:
                  - lambda: return id(wake_word_engine_location).state != "On device";
                  - switch.is_on: use_listen_light
                then:
                  - light.turn_on:
                      id: led
                      red: 0%
                      green: 100%
                      blue: 100%
                      brightness: 60%
                      effect: none
                else:
                  - light.turn_off: led
  - id: start_wake_word
    then:
      - wait_until:
          and:
            - media_player.is_idle:
            - speaker.is_stopped:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - voice_assistant.stop
            - micro_wake_word.stop:
            - delay: 1s
            - script.execute: reset_led
            - script.wait: reset_led
            - micro_wake_word.start:
          else:
            - if:
                condition: voice_assistant.is_running
                then:
                  - voice_assistant.stop:
                  - script.execute: reset_led
            - voice_assistant.start_continuous:

switch:
  - platform: template # wake word detection - allows you to bind an automation to the wakeword.
    name: "Wake Word Active"
    id: wake_word_active
    optimistic: true
    restore_mode: ALWAYS_OFF
    entity_category: diagnostic
  # - platform: template # continue comversation - allows you to bind an automation to the continue.
  #   name: "Needs Reply Active"
  #   id: needs_reply_active
  #   optimistic: true
  #   restore_mode: ALWAYS_OFF
  #   entity_category: diagnostic
    # on_turn_off:
    #   - rtttl.play: "beep: d=4,o=5,b=100:b" # play a short tone
    #   # Turn off we want to start up the reply system
    #   - if:
    #       condition:
    #         lambda: return id(wake_word_active).state == true;
    #       then:
    #         - wait_until:
    #             and:
    #               - media_player.is_idle:
    #               - speaker.is_stopped:
    #         - script.execute: reset_led
    #         - script.wait: reset_led
    #         - voice_assistant.stop:
    #         - rtttl.play: "beep: d=4,o=5,b=100:b" # play a short tone
    #         - delay: 500ms
    #         #- voice_assistant.start:
    # on_turn_on:
    #     - rtttl.play: "beep: d=4,o=5,b=100:b" # play a short tone

  - platform: template
    name: Use listen light
    id: use_listen_light
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_on:
      - script.execute: reset_led
    on_turn_off:
      - script.execute: reset_led
  - platform: template
    id: timer_ringing
    optimistic: true
    restore_mode: ALWAYS_OFF
    on_turn_off:
      # Turn off the repeat mode and disable the pause between playlist items
      - lambda: |-
              id(echo_media_player)
                ->make_call()
                .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
                .set_announcement(true)
                .perform();
              id(echo_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);
      # Stop playing the alarm
      - media_player.stop:
          announcement: true
    on_turn_on:
      # Turn on the repeat mode and pause for 1000 ms between playlist items/repeats
      - lambda: |-
            id(echo_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
              .set_announcement(true)
              .perform();
            id(echo_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 1000);
      - media_player.speaker.play_on_device_media_file:
          media_file: timer_finished_wave_file
          announcement: true
      - delay: 15min
      - switch.turn_off: timer_ringing

text:
  - platform: template
    name: Output Media Player
    id: output_speaker
    optimistic: true
    mode: text
    icon: "mdi:cursor-text"
    on_value:
      - if:
          condition:
            lambda: return x != "";
          then:
            - voice_assistant.stop:
          else:
            - voice_assistant.start_continuous:
  # - platform: template
  #   name: Debug Message
  #   id: debug_message
  #   entity_category: diagnostic
  #   optimistic: true
  #   mode: text
  #   icon: "mdi:debug"

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: On device
    on_value:
      - if:
          condition:
            lambda: return x == "In Home Assistant";
          then:
            - micro_wake_word.stop
            - delay: 500ms
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:
      - if:
          condition:
            lambda: return x == "On device";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop
            - delay: 500ms
            - micro_wake_word.start

rtttl: # used for sound on wakeword (ondevice)
  speaker: echo_speaker
  id: my_rtttl
  gain: 0.8

micro_wake_word:
  on_wake_word_detected:
    - switch.turn_on: wake_word_active # turn on the wake word detection for automation - used to play media on other device
    - rtttl.play: "two_short:d=4,o=5,b=100:16e6,16e6" # play a short tone
    # - rtttl.play: "beep: d=4,o=5,b=100:b"
    - delay: 100ms
    - voice_assistant.start:
        wake_word: !lambda return wake_word;
  vad:
  models:
    - model: ${micro_wake_word_model}
